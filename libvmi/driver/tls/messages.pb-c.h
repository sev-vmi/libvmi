/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: messages.proto */

#ifndef PROTOBUF_C_messages_2eproto__INCLUDED
#define PROTOBUF_C_messages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct MsgProto__AttestReportReq MsgProto__AttestReportReq;
typedef struct MsgProto__DataReadReq MsgProto__DataReadReq;
typedef struct MsgProto__DataWriteReq MsgProto__DataWriteReq;
typedef struct MsgProto__PauseReq MsgProto__PauseReq;
typedef struct MsgProto__ResumeReq MsgProto__ResumeReq;
typedef struct MsgProto__MemBoundaryReq MsgProto__MemBoundaryReq;
typedef struct MsgProto__RegisterReadReq MsgProto__RegisterReadReq;
typedef struct MsgProto__RegisterWriteReq MsgProto__RegisterWriteReq;
typedef struct MsgProto__PageReadReq MsgProto__PageReadReq;
typedef struct MsgProto__PageWriteReq MsgProto__PageWriteReq;
typedef struct MsgProto__MonitorPageReq MsgProto__MonitorPageReq;
typedef struct MsgProto__MonitorResumeReq MsgProto__MonitorResumeReq;
typedef struct MsgProto__AttestReportReply MsgProto__AttestReportReply;
typedef struct MsgProto__DataReadReply MsgProto__DataReadReply;
typedef struct MsgProto__DataWriteReply MsgProto__DataWriteReply;
typedef struct MsgProto__PauseReply MsgProto__PauseReply;
typedef struct MsgProto__ResumeReply MsgProto__ResumeReply;
typedef struct MsgProto__MemBoundaryReply MsgProto__MemBoundaryReply;
typedef struct MsgProto__RegisterReadReply MsgProto__RegisterReadReply;
typedef struct MsgProto__RegisterWriteReply MsgProto__RegisterWriteReply;
typedef struct MsgProto__PageReadReply MsgProto__PageReadReply;
typedef struct MsgProto__PageWriteReply MsgProto__PageWriteReply;
typedef struct MsgProto__MonitorPageReply MsgProto__MonitorPageReply;
typedef struct MsgProto__MonitorResumeReply MsgProto__MonitorResumeReply;
typedef struct MsgProto__MonitorPageEvent MsgProto__MonitorPageEvent;
typedef struct MsgProto__AgentPush MsgProto__AgentPush;
typedef struct MsgProto__AccessRequest MsgProto__AccessRequest;
typedef struct MsgProto__AccessReply MsgProto__AccessReply;


/* --- enums --- */

typedef enum _MsgProto__RequestStatus {
  MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS = 0,
  MSG_PROTO__REQUEST_STATUS__REQUEST_FAILED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG_PROTO__REQUEST_STATUS)
} MsgProto__RequestStatus;
typedef enum _MsgProto__MemAccessType {
  MSG_PROTO__MEM_ACCESS_TYPE__DISABLE = 1,
  /*
   * todo: VMPLs only allow no-write or no-read/write
   */
  MSG_PROTO__MEM_ACCESS_TYPE__READ = 2,
  MSG_PROTO__MEM_ACCESS_TYPE__WRITE = 3,
  MSG_PROTO__MEM_ACCESS_TYPE__READ_WRITE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG_PROTO__MEM_ACCESS_TYPE)
} MsgProto__MemAccessType;
/*
 * based on libvmi.h
 */
typedef enum _MsgProto__RegisterID {
  MSG_PROTO__REGISTER_ID__RAX = 0,
  MSG_PROTO__REGISTER_ID__RBX = 1,
  MSG_PROTO__REGISTER_ID__RCX = 2,
  MSG_PROTO__REGISTER_ID__RDX = 3,
  MSG_PROTO__REGISTER_ID__RBP = 4,
  MSG_PROTO__REGISTER_ID__RSI = 5,
  MSG_PROTO__REGISTER_ID__RDI = 6,
  MSG_PROTO__REGISTER_ID__RSP = 7,
  MSG_PROTO__REGISTER_ID__RIP = 8,
  MSG_PROTO__REGISTER_ID__RFLAGS = 9,
  MSG_PROTO__REGISTER_ID__R8 = 10,
  MSG_PROTO__REGISTER_ID__R9 = 11,
  MSG_PROTO__REGISTER_ID__R10 = 12,
  MSG_PROTO__REGISTER_ID__R11 = 13,
  MSG_PROTO__REGISTER_ID__R12 = 14,
  MSG_PROTO__REGISTER_ID__R13 = 15,
  MSG_PROTO__REGISTER_ID__R14 = 16,
  MSG_PROTO__REGISTER_ID__R15 = 17,
  MSG_PROTO__REGISTER_ID__CR0 = 18,
  MSG_PROTO__REGISTER_ID__CR2 = 19,
  MSG_PROTO__REGISTER_ID__CR3 = 20,
  MSG_PROTO__REGISTER_ID__CR4 = 21,
  MSG_PROTO__REGISTER_ID__XCR0 = 22,
  MSG_PROTO__REGISTER_ID__DR0 = 23,
  MSG_PROTO__REGISTER_ID__DR1 = 24,
  MSG_PROTO__REGISTER_ID__DR2 = 25,
  MSG_PROTO__REGISTER_ID__DR3 = 26,
  MSG_PROTO__REGISTER_ID__DR6 = 27,
  MSG_PROTO__REGISTER_ID__DR7 = 28,
  MSG_PROTO__REGISTER_ID__CS_SEL = 29,
  MSG_PROTO__REGISTER_ID__DS_SEL = 30,
  MSG_PROTO__REGISTER_ID__ES_SEL = 31,
  MSG_PROTO__REGISTER_ID__FS_SEL = 32,
  MSG_PROTO__REGISTER_ID__GS_SEL = 33,
  MSG_PROTO__REGISTER_ID__SS_SEL = 34,
  MSG_PROTO__REGISTER_ID__TR_SEL = 35,
  MSG_PROTO__REGISTER_ID__LDTR_SEL = 36,
  MSG_PROTO__REGISTER_ID__CS_LIMIT = 37,
  MSG_PROTO__REGISTER_ID__DS_LIMIT = 38,
  MSG_PROTO__REGISTER_ID__ES_LIMIT = 39,
  MSG_PROTO__REGISTER_ID__FS_LIMIT = 40,
  MSG_PROTO__REGISTER_ID__GS_LIMIT = 41,
  MSG_PROTO__REGISTER_ID__SS_LIMIT = 42,
  MSG_PROTO__REGISTER_ID__TR_LIMIT = 43,
  MSG_PROTO__REGISTER_ID__LDTR_LIMIT = 44,
  MSG_PROTO__REGISTER_ID__IDTR_LIMIT = 45,
  MSG_PROTO__REGISTER_ID__GDTR_LIMIT = 46,
  MSG_PROTO__REGISTER_ID__CS_BASE = 47,
  MSG_PROTO__REGISTER_ID__DS_BASE = 48,
  MSG_PROTO__REGISTER_ID__ES_BASE = 49,
  MSG_PROTO__REGISTER_ID__FS_BASE = 50,
  MSG_PROTO__REGISTER_ID__GS_BASE = 51,
  MSG_PROTO__REGISTER_ID__SS_BASE = 52,
  MSG_PROTO__REGISTER_ID__TR_BASE = 53,
  MSG_PROTO__REGISTER_ID__LDTR_BASE = 54,
  MSG_PROTO__REGISTER_ID__IDTR_BASE = 55,
  MSG_PROTO__REGISTER_ID__GDTR_BASE = 56,
  MSG_PROTO__REGISTER_ID__SYSENTER_CS = 65,
  MSG_PROTO__REGISTER_ID__SYSENTER_ESP = 66,
  MSG_PROTO__REGISTER_ID__SYSENTER_EIP = 67,
  MSG_PROTO__REGISTER_ID__MSR_EFER = 74
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG_PROTO__REGISTER_ID)
} MsgProto__RegisterID;

/* --- messages --- */

struct  MsgProto__AttestReportReq
{
  ProtobufCMessage base;
};
#define MSG_PROTO__ATTEST_REPORT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__attest_report_req__descriptor) \
     }


/*
 * deprecated
 */
struct  MsgProto__DataReadReq
{
  ProtobufCMessage base;
  uint64_t address;
  uint64_t numbytes;
};
#define MSG_PROTO__DATA_READ_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__data_read_req__descriptor) \
    , 0, 0 }


/*
 * deprecated
 */
struct  MsgProto__DataWriteReq
{
  ProtobufCMessage base;
  uint64_t address;
  uint64_t data_len;
  ProtobufCBinaryData data;
};
#define MSG_PROTO__DATA_WRITE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__data_write_req__descriptor) \
    , 0, 0, {0,NULL} }


struct  MsgProto__PauseReq
{
  ProtobufCMessage base;
};
#define MSG_PROTO__PAUSE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__pause_req__descriptor) \
     }


struct  MsgProto__ResumeReq
{
  ProtobufCMessage base;
};
#define MSG_PROTO__RESUME_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__resume_req__descriptor) \
     }


/*
 * for get_memsize of LibVMI
 */
struct  MsgProto__MemBoundaryReq
{
  ProtobufCMessage base;
};
#define MSG_PROTO__MEM_BOUNDARY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__mem_boundary_req__descriptor) \
     }


struct  MsgProto__RegisterReadReq
{
  ProtobufCMessage base;
  MsgProto__RegisterID register_;
  uint64_t vcpu;
};
#define MSG_PROTO__REGISTER_READ_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__register_read_req__descriptor) \
    , MSG_PROTO__REGISTER_ID__RAX, 0 }


struct  MsgProto__RegisterWriteReq
{
  ProtobufCMessage base;
  MsgProto__RegisterID register_;
  uint64_t vcpu;
  uint64_t value;
};
#define MSG_PROTO__REGISTER_WRITE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__register_write_req__descriptor) \
    , MSG_PROTO__REGISTER_ID__RAX, 0, 0 }


struct  MsgProto__PageReadReq
{
  ProtobufCMessage base;
  /*
   * paddr >> vmi->page_shift
   */
  uint64_t frame_num;
};
#define MSG_PROTO__PAGE_READ_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__page_read_req__descriptor) \
    , 0 }


struct  MsgProto__PageWriteReq
{
  ProtobufCMessage base;
  uint64_t paddr;
  /*
   * libvmi picks size within page boundary
   */
  ProtobufCBinaryData write_buffer;
};
#define MSG_PROTO__PAGE_WRITE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__page_write_req__descriptor) \
    , 0, {0,NULL} }


struct  MsgProto__MonitorPageReq
{
  ProtobufCMessage base;
  /*
   * gpfn
   */
  uint64_t frame_num;
  /*
   *TODO: optional Vmpl vmpl = 3;
   */
  MsgProto__MemAccessType access_type;
};
#define MSG_PROTO__MONITOR_PAGE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__monitor_page_req__descriptor) \
    , 0, MSG_PROTO__MEM_ACCESS_TYPE__DISABLE }


struct  MsgProto__MonitorResumeReq
{
  ProtobufCMessage base;
  uint64_t vcpu;
};
#define MSG_PROTO__MONITOR_RESUME_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__monitor_resume_req__descriptor) \
    , 0 }


struct  MsgProto__AttestReportReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
  ProtobufCBinaryData report;
};
#define MSG_PROTO__ATTEST_REPORT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__attest_report_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS, {0,NULL} }


struct  MsgProto__DataReadReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
  /*
   * optional (on failure?)?
   */
  uint64_t data_len;
  /*
   * optional (on failure?)?
   */
  ProtobufCBinaryData data;
};
#define MSG_PROTO__DATA_READ_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__data_read_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS, 0, {0,NULL} }


struct  MsgProto__DataWriteReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
};
#define MSG_PROTO__DATA_WRITE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__data_write_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS }


struct  MsgProto__PauseReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
};
#define MSG_PROTO__PAUSE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__pause_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS }


struct  MsgProto__ResumeReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
};
#define MSG_PROTO__RESUME_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__resume_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS }


/*
 * Addresses < could be used by VMPL1 and are therefore potentially inspectable.
 */
struct  MsgProto__MemBoundaryReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
  /*
   * optional (on failure?)?
   */
  uint64_t vmpl0_begin_gpa;
};
#define MSG_PROTO__MEM_BOUNDARY_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__mem_boundary_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS, 0 }


struct  MsgProto__RegisterReadReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
  /*
   * optional (on failure?)?
   */
  uint64_t value;
};
#define MSG_PROTO__REGISTER_READ_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__register_read_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS, 0 }


struct  MsgProto__RegisterWriteReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
};
#define MSG_PROTO__REGISTER_WRITE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__register_write_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS }


/*
 * TODO: how will we send that message? 4kB is too huge for a single msg;
 */
struct  MsgProto__PageReadReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
  /*
   * 4kB // optional (on failure?)?
   */
  ProtobufCBinaryData page;
};
#define MSG_PROTO__PAGE_READ_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__page_read_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS, {0,NULL} }


struct  MsgProto__PageWriteReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
};
#define MSG_PROTO__PAGE_WRITE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__page_write_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS }


struct  MsgProto__MonitorPageReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
};
#define MSG_PROTO__MONITOR_PAGE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__monitor_page_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS }


struct  MsgProto__MonitorResumeReply
{
  ProtobufCMessage base;
  MsgProto__RequestStatus status;
};
#define MSG_PROTO__MONITOR_RESUME_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__monitor_resume_reply__descriptor) \
    , MSG_PROTO__REQUEST_STATUS__REQUEST_SUCCESS }


/*
 * event push message
 */
struct  MsgProto__MonitorPageEvent
{
  ProtobufCMessage base;
  MsgProto__MemAccessType access_type;
  uint64_t vcpu;
  /*
   * from VMSA GUEST_EXITINFO2 (currently w/o offset)
   */
  uint64_t fault_gpa;
  /*
   * currently invalid (must be extracetd from instruction)
   */
  uint64_t fault_gva;
};
#define MSG_PROTO__MONITOR_PAGE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__monitor_page_event__descriptor) \
    , MSG_PROTO__MEM_ACCESS_TYPE__DISABLE, 0, 0, 0 }


typedef enum {
  MSG_PROTO__AGENT_PUSH__INFO_MESSAGE__NOT_SET = 0,
  MSG_PROTO__AGENT_PUSH__INFO_MESSAGE_MNTR_PAGE_EVENT = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG_PROTO__AGENT_PUSH__INFO_MESSAGE__CASE)
} MsgProto__AgentPush__InfoMessageCase;

struct  MsgProto__AgentPush
{
  ProtobufCMessage base;
  MsgProto__AgentPush__InfoMessageCase info_message_case;
  union {
    MsgProto__MonitorPageEvent *mntr_page_event;
  };
};
#define MSG_PROTO__AGENT_PUSH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__agent_push__descriptor) \
    , MSG_PROTO__AGENT_PUSH__INFO_MESSAGE__NOT_SET, {0} }


typedef enum {
  MSG_PROTO__ACCESS_REQUEST__REQUEST__NOT_SET = 0,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_READ_REQ = 1,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_WRITE_REQ = 2,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_PAUSE_REQ = 3,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_RESUME_REQ = 4,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_MEMBD_REQ = 5,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_RREG_REQ = 6,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_WREG_REQ = 7,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_RPAGE_REQ = 8,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_WPAGE_REQ = 9,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_MNTR_PAGE_REQ = 10,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_MNTR_RESUME_REQ = 11,
  MSG_PROTO__ACCESS_REQUEST__REQUEST_ATTEST_REPORT_REQ = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG_PROTO__ACCESS_REQUEST__REQUEST__CASE)
} MsgProto__AccessRequest__RequestCase;

/*
 * Client --> Agent
 */
struct  MsgProto__AccessRequest
{
  ProtobufCMessage base;
  MsgProto__AccessRequest__RequestCase request_case;
  union {
    MsgProto__DataReadReq *read_req;
    MsgProto__DataWriteReq *write_req;
    MsgProto__PauseReq *pause_req;
    MsgProto__ResumeReq *resume_req;
    MsgProto__MemBoundaryReq *membd_req;
    MsgProto__RegisterReadReq *rreg_req;
    MsgProto__RegisterWriteReq *wreg_req;
    MsgProto__PageReadReq *rpage_req;
    MsgProto__PageWriteReq *wpage_req;
    MsgProto__MonitorPageReq *mntr_page_req;
    MsgProto__MonitorResumeReq *mntr_resume_req;
    MsgProto__AttestReportReq *attest_report_req;
  };
};
#define MSG_PROTO__ACCESS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__access_request__descriptor) \
    , MSG_PROTO__ACCESS_REQUEST__REQUEST__NOT_SET, {0} }


typedef enum {
  MSG_PROTO__ACCESS_REPLY__REPLY__NOT_SET = 0,
  MSG_PROTO__ACCESS_REPLY__REPLY_READ_REPLY = 1,
  MSG_PROTO__ACCESS_REPLY__REPLY_WRITE_REPLY = 2,
  MSG_PROTO__ACCESS_REPLY__REPLY_PAUSE_REPLY = 3,
  MSG_PROTO__ACCESS_REPLY__REPLY_RESUME_REPLY = 4,
  MSG_PROTO__ACCESS_REPLY__REPLY_MEMBD_REPLY = 5,
  MSG_PROTO__ACCESS_REPLY__REPLY_RREG_REPLY = 6,
  MSG_PROTO__ACCESS_REPLY__REPLY_WREG_REPLY = 7,
  MSG_PROTO__ACCESS_REPLY__REPLY_RPAGE_REPLY = 8,
  MSG_PROTO__ACCESS_REPLY__REPLY_WPAGE_REPLY = 9,
  MSG_PROTO__ACCESS_REPLY__REPLY_MNTR_PAGE_REPLY = 10,
  MSG_PROTO__ACCESS_REPLY__REPLY_MNTR_RESUME_REPLY = 11,
  MSG_PROTO__ACCESS_REPLY__REPLY_AGENT_PUSH_MSG = 12,
  MSG_PROTO__ACCESS_REPLY__REPLY_ATTEST_REPORT_REPLY = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG_PROTO__ACCESS_REPLY__REPLY__CASE)
} MsgProto__AccessReply__ReplyCase;

/*
 * Client <-- Agent
 */
struct  MsgProto__AccessReply
{
  ProtobufCMessage base;
  MsgProto__AccessReply__ReplyCase reply_case;
  union {
    MsgProto__DataReadReply *read_reply;
    MsgProto__DataWriteReply *write_reply;
    MsgProto__PauseReply *pause_reply;
    MsgProto__ResumeReply *resume_reply;
    MsgProto__MemBoundaryReply *membd_reply;
    MsgProto__RegisterReadReply *rreg_reply;
    MsgProto__RegisterWriteReply *wreg_reply;
    MsgProto__PageReadReply *rpage_reply;
    MsgProto__PageWriteReply *wpage_reply;
    MsgProto__MonitorPageReply *mntr_page_reply;
    MsgProto__MonitorResumeReply *mntr_resume_reply;
    MsgProto__AgentPush *agent_push_msg;
    MsgProto__AttestReportReply *attest_report_reply;
  };
};
#define MSG_PROTO__ACCESS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg_proto__access_reply__descriptor) \
    , MSG_PROTO__ACCESS_REPLY__REPLY__NOT_SET, {0} }


/* MsgProto__AttestReportReq methods */
void   msg_proto__attest_report_req__init
                     (MsgProto__AttestReportReq         *message);
size_t msg_proto__attest_report_req__get_packed_size
                     (const MsgProto__AttestReportReq   *message);
size_t msg_proto__attest_report_req__pack
                     (const MsgProto__AttestReportReq   *message,
                      uint8_t             *out);
size_t msg_proto__attest_report_req__pack_to_buffer
                     (const MsgProto__AttestReportReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__AttestReportReq *
       msg_proto__attest_report_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__attest_report_req__free_unpacked
                     (MsgProto__AttestReportReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__DataReadReq methods */
void   msg_proto__data_read_req__init
                     (MsgProto__DataReadReq         *message);
size_t msg_proto__data_read_req__get_packed_size
                     (const MsgProto__DataReadReq   *message);
size_t msg_proto__data_read_req__pack
                     (const MsgProto__DataReadReq   *message,
                      uint8_t             *out);
size_t msg_proto__data_read_req__pack_to_buffer
                     (const MsgProto__DataReadReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__DataReadReq *
       msg_proto__data_read_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__data_read_req__free_unpacked
                     (MsgProto__DataReadReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__DataWriteReq methods */
void   msg_proto__data_write_req__init
                     (MsgProto__DataWriteReq         *message);
size_t msg_proto__data_write_req__get_packed_size
                     (const MsgProto__DataWriteReq   *message);
size_t msg_proto__data_write_req__pack
                     (const MsgProto__DataWriteReq   *message,
                      uint8_t             *out);
size_t msg_proto__data_write_req__pack_to_buffer
                     (const MsgProto__DataWriteReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__DataWriteReq *
       msg_proto__data_write_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__data_write_req__free_unpacked
                     (MsgProto__DataWriteReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__PauseReq methods */
void   msg_proto__pause_req__init
                     (MsgProto__PauseReq         *message);
size_t msg_proto__pause_req__get_packed_size
                     (const MsgProto__PauseReq   *message);
size_t msg_proto__pause_req__pack
                     (const MsgProto__PauseReq   *message,
                      uint8_t             *out);
size_t msg_proto__pause_req__pack_to_buffer
                     (const MsgProto__PauseReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__PauseReq *
       msg_proto__pause_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__pause_req__free_unpacked
                     (MsgProto__PauseReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__ResumeReq methods */
void   msg_proto__resume_req__init
                     (MsgProto__ResumeReq         *message);
size_t msg_proto__resume_req__get_packed_size
                     (const MsgProto__ResumeReq   *message);
size_t msg_proto__resume_req__pack
                     (const MsgProto__ResumeReq   *message,
                      uint8_t             *out);
size_t msg_proto__resume_req__pack_to_buffer
                     (const MsgProto__ResumeReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__ResumeReq *
       msg_proto__resume_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__resume_req__free_unpacked
                     (MsgProto__ResumeReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__MemBoundaryReq methods */
void   msg_proto__mem_boundary_req__init
                     (MsgProto__MemBoundaryReq         *message);
size_t msg_proto__mem_boundary_req__get_packed_size
                     (const MsgProto__MemBoundaryReq   *message);
size_t msg_proto__mem_boundary_req__pack
                     (const MsgProto__MemBoundaryReq   *message,
                      uint8_t             *out);
size_t msg_proto__mem_boundary_req__pack_to_buffer
                     (const MsgProto__MemBoundaryReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__MemBoundaryReq *
       msg_proto__mem_boundary_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__mem_boundary_req__free_unpacked
                     (MsgProto__MemBoundaryReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__RegisterReadReq methods */
void   msg_proto__register_read_req__init
                     (MsgProto__RegisterReadReq         *message);
size_t msg_proto__register_read_req__get_packed_size
                     (const MsgProto__RegisterReadReq   *message);
size_t msg_proto__register_read_req__pack
                     (const MsgProto__RegisterReadReq   *message,
                      uint8_t             *out);
size_t msg_proto__register_read_req__pack_to_buffer
                     (const MsgProto__RegisterReadReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__RegisterReadReq *
       msg_proto__register_read_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__register_read_req__free_unpacked
                     (MsgProto__RegisterReadReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__RegisterWriteReq methods */
void   msg_proto__register_write_req__init
                     (MsgProto__RegisterWriteReq         *message);
size_t msg_proto__register_write_req__get_packed_size
                     (const MsgProto__RegisterWriteReq   *message);
size_t msg_proto__register_write_req__pack
                     (const MsgProto__RegisterWriteReq   *message,
                      uint8_t             *out);
size_t msg_proto__register_write_req__pack_to_buffer
                     (const MsgProto__RegisterWriteReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__RegisterWriteReq *
       msg_proto__register_write_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__register_write_req__free_unpacked
                     (MsgProto__RegisterWriteReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__PageReadReq methods */
void   msg_proto__page_read_req__init
                     (MsgProto__PageReadReq         *message);
size_t msg_proto__page_read_req__get_packed_size
                     (const MsgProto__PageReadReq   *message);
size_t msg_proto__page_read_req__pack
                     (const MsgProto__PageReadReq   *message,
                      uint8_t             *out);
size_t msg_proto__page_read_req__pack_to_buffer
                     (const MsgProto__PageReadReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__PageReadReq *
       msg_proto__page_read_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__page_read_req__free_unpacked
                     (MsgProto__PageReadReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__PageWriteReq methods */
void   msg_proto__page_write_req__init
                     (MsgProto__PageWriteReq         *message);
size_t msg_proto__page_write_req__get_packed_size
                     (const MsgProto__PageWriteReq   *message);
size_t msg_proto__page_write_req__pack
                     (const MsgProto__PageWriteReq   *message,
                      uint8_t             *out);
size_t msg_proto__page_write_req__pack_to_buffer
                     (const MsgProto__PageWriteReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__PageWriteReq *
       msg_proto__page_write_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__page_write_req__free_unpacked
                     (MsgProto__PageWriteReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__MonitorPageReq methods */
void   msg_proto__monitor_page_req__init
                     (MsgProto__MonitorPageReq         *message);
size_t msg_proto__monitor_page_req__get_packed_size
                     (const MsgProto__MonitorPageReq   *message);
size_t msg_proto__monitor_page_req__pack
                     (const MsgProto__MonitorPageReq   *message,
                      uint8_t             *out);
size_t msg_proto__monitor_page_req__pack_to_buffer
                     (const MsgProto__MonitorPageReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__MonitorPageReq *
       msg_proto__monitor_page_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__monitor_page_req__free_unpacked
                     (MsgProto__MonitorPageReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__MonitorResumeReq methods */
void   msg_proto__monitor_resume_req__init
                     (MsgProto__MonitorResumeReq         *message);
size_t msg_proto__monitor_resume_req__get_packed_size
                     (const MsgProto__MonitorResumeReq   *message);
size_t msg_proto__monitor_resume_req__pack
                     (const MsgProto__MonitorResumeReq   *message,
                      uint8_t             *out);
size_t msg_proto__monitor_resume_req__pack_to_buffer
                     (const MsgProto__MonitorResumeReq   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__MonitorResumeReq *
       msg_proto__monitor_resume_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__monitor_resume_req__free_unpacked
                     (MsgProto__MonitorResumeReq *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__AttestReportReply methods */
void   msg_proto__attest_report_reply__init
                     (MsgProto__AttestReportReply         *message);
size_t msg_proto__attest_report_reply__get_packed_size
                     (const MsgProto__AttestReportReply   *message);
size_t msg_proto__attest_report_reply__pack
                     (const MsgProto__AttestReportReply   *message,
                      uint8_t             *out);
size_t msg_proto__attest_report_reply__pack_to_buffer
                     (const MsgProto__AttestReportReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__AttestReportReply *
       msg_proto__attest_report_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__attest_report_reply__free_unpacked
                     (MsgProto__AttestReportReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__DataReadReply methods */
void   msg_proto__data_read_reply__init
                     (MsgProto__DataReadReply         *message);
size_t msg_proto__data_read_reply__get_packed_size
                     (const MsgProto__DataReadReply   *message);
size_t msg_proto__data_read_reply__pack
                     (const MsgProto__DataReadReply   *message,
                      uint8_t             *out);
size_t msg_proto__data_read_reply__pack_to_buffer
                     (const MsgProto__DataReadReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__DataReadReply *
       msg_proto__data_read_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__data_read_reply__free_unpacked
                     (MsgProto__DataReadReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__DataWriteReply methods */
void   msg_proto__data_write_reply__init
                     (MsgProto__DataWriteReply         *message);
size_t msg_proto__data_write_reply__get_packed_size
                     (const MsgProto__DataWriteReply   *message);
size_t msg_proto__data_write_reply__pack
                     (const MsgProto__DataWriteReply   *message,
                      uint8_t             *out);
size_t msg_proto__data_write_reply__pack_to_buffer
                     (const MsgProto__DataWriteReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__DataWriteReply *
       msg_proto__data_write_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__data_write_reply__free_unpacked
                     (MsgProto__DataWriteReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__PauseReply methods */
void   msg_proto__pause_reply__init
                     (MsgProto__PauseReply         *message);
size_t msg_proto__pause_reply__get_packed_size
                     (const MsgProto__PauseReply   *message);
size_t msg_proto__pause_reply__pack
                     (const MsgProto__PauseReply   *message,
                      uint8_t             *out);
size_t msg_proto__pause_reply__pack_to_buffer
                     (const MsgProto__PauseReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__PauseReply *
       msg_proto__pause_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__pause_reply__free_unpacked
                     (MsgProto__PauseReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__ResumeReply methods */
void   msg_proto__resume_reply__init
                     (MsgProto__ResumeReply         *message);
size_t msg_proto__resume_reply__get_packed_size
                     (const MsgProto__ResumeReply   *message);
size_t msg_proto__resume_reply__pack
                     (const MsgProto__ResumeReply   *message,
                      uint8_t             *out);
size_t msg_proto__resume_reply__pack_to_buffer
                     (const MsgProto__ResumeReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__ResumeReply *
       msg_proto__resume_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__resume_reply__free_unpacked
                     (MsgProto__ResumeReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__MemBoundaryReply methods */
void   msg_proto__mem_boundary_reply__init
                     (MsgProto__MemBoundaryReply         *message);
size_t msg_proto__mem_boundary_reply__get_packed_size
                     (const MsgProto__MemBoundaryReply   *message);
size_t msg_proto__mem_boundary_reply__pack
                     (const MsgProto__MemBoundaryReply   *message,
                      uint8_t             *out);
size_t msg_proto__mem_boundary_reply__pack_to_buffer
                     (const MsgProto__MemBoundaryReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__MemBoundaryReply *
       msg_proto__mem_boundary_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__mem_boundary_reply__free_unpacked
                     (MsgProto__MemBoundaryReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__RegisterReadReply methods */
void   msg_proto__register_read_reply__init
                     (MsgProto__RegisterReadReply         *message);
size_t msg_proto__register_read_reply__get_packed_size
                     (const MsgProto__RegisterReadReply   *message);
size_t msg_proto__register_read_reply__pack
                     (const MsgProto__RegisterReadReply   *message,
                      uint8_t             *out);
size_t msg_proto__register_read_reply__pack_to_buffer
                     (const MsgProto__RegisterReadReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__RegisterReadReply *
       msg_proto__register_read_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__register_read_reply__free_unpacked
                     (MsgProto__RegisterReadReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__RegisterWriteReply methods */
void   msg_proto__register_write_reply__init
                     (MsgProto__RegisterWriteReply         *message);
size_t msg_proto__register_write_reply__get_packed_size
                     (const MsgProto__RegisterWriteReply   *message);
size_t msg_proto__register_write_reply__pack
                     (const MsgProto__RegisterWriteReply   *message,
                      uint8_t             *out);
size_t msg_proto__register_write_reply__pack_to_buffer
                     (const MsgProto__RegisterWriteReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__RegisterWriteReply *
       msg_proto__register_write_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__register_write_reply__free_unpacked
                     (MsgProto__RegisterWriteReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__PageReadReply methods */
void   msg_proto__page_read_reply__init
                     (MsgProto__PageReadReply         *message);
size_t msg_proto__page_read_reply__get_packed_size
                     (const MsgProto__PageReadReply   *message);
size_t msg_proto__page_read_reply__pack
                     (const MsgProto__PageReadReply   *message,
                      uint8_t             *out);
size_t msg_proto__page_read_reply__pack_to_buffer
                     (const MsgProto__PageReadReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__PageReadReply *
       msg_proto__page_read_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__page_read_reply__free_unpacked
                     (MsgProto__PageReadReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__PageWriteReply methods */
void   msg_proto__page_write_reply__init
                     (MsgProto__PageWriteReply         *message);
size_t msg_proto__page_write_reply__get_packed_size
                     (const MsgProto__PageWriteReply   *message);
size_t msg_proto__page_write_reply__pack
                     (const MsgProto__PageWriteReply   *message,
                      uint8_t             *out);
size_t msg_proto__page_write_reply__pack_to_buffer
                     (const MsgProto__PageWriteReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__PageWriteReply *
       msg_proto__page_write_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__page_write_reply__free_unpacked
                     (MsgProto__PageWriteReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__MonitorPageReply methods */
void   msg_proto__monitor_page_reply__init
                     (MsgProto__MonitorPageReply         *message);
size_t msg_proto__monitor_page_reply__get_packed_size
                     (const MsgProto__MonitorPageReply   *message);
size_t msg_proto__monitor_page_reply__pack
                     (const MsgProto__MonitorPageReply   *message,
                      uint8_t             *out);
size_t msg_proto__monitor_page_reply__pack_to_buffer
                     (const MsgProto__MonitorPageReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__MonitorPageReply *
       msg_proto__monitor_page_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__monitor_page_reply__free_unpacked
                     (MsgProto__MonitorPageReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__MonitorResumeReply methods */
void   msg_proto__monitor_resume_reply__init
                     (MsgProto__MonitorResumeReply         *message);
size_t msg_proto__monitor_resume_reply__get_packed_size
                     (const MsgProto__MonitorResumeReply   *message);
size_t msg_proto__monitor_resume_reply__pack
                     (const MsgProto__MonitorResumeReply   *message,
                      uint8_t             *out);
size_t msg_proto__monitor_resume_reply__pack_to_buffer
                     (const MsgProto__MonitorResumeReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__MonitorResumeReply *
       msg_proto__monitor_resume_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__monitor_resume_reply__free_unpacked
                     (MsgProto__MonitorResumeReply *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__MonitorPageEvent methods */
void   msg_proto__monitor_page_event__init
                     (MsgProto__MonitorPageEvent         *message);
size_t msg_proto__monitor_page_event__get_packed_size
                     (const MsgProto__MonitorPageEvent   *message);
size_t msg_proto__monitor_page_event__pack
                     (const MsgProto__MonitorPageEvent   *message,
                      uint8_t             *out);
size_t msg_proto__monitor_page_event__pack_to_buffer
                     (const MsgProto__MonitorPageEvent   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__MonitorPageEvent *
       msg_proto__monitor_page_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__monitor_page_event__free_unpacked
                     (MsgProto__MonitorPageEvent *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__AgentPush methods */
void   msg_proto__agent_push__init
                     (MsgProto__AgentPush         *message);
size_t msg_proto__agent_push__get_packed_size
                     (const MsgProto__AgentPush   *message);
size_t msg_proto__agent_push__pack
                     (const MsgProto__AgentPush   *message,
                      uint8_t             *out);
size_t msg_proto__agent_push__pack_to_buffer
                     (const MsgProto__AgentPush   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__AgentPush *
       msg_proto__agent_push__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__agent_push__free_unpacked
                     (MsgProto__AgentPush *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__AccessRequest methods */
void   msg_proto__access_request__init
                     (MsgProto__AccessRequest         *message);
size_t msg_proto__access_request__get_packed_size
                     (const MsgProto__AccessRequest   *message);
size_t msg_proto__access_request__pack
                     (const MsgProto__AccessRequest   *message,
                      uint8_t             *out);
size_t msg_proto__access_request__pack_to_buffer
                     (const MsgProto__AccessRequest   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__AccessRequest *
       msg_proto__access_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__access_request__free_unpacked
                     (MsgProto__AccessRequest *message,
                      ProtobufCAllocator *allocator);
/* MsgProto__AccessReply methods */
void   msg_proto__access_reply__init
                     (MsgProto__AccessReply         *message);
size_t msg_proto__access_reply__get_packed_size
                     (const MsgProto__AccessReply   *message);
size_t msg_proto__access_reply__pack
                     (const MsgProto__AccessReply   *message,
                      uint8_t             *out);
size_t msg_proto__access_reply__pack_to_buffer
                     (const MsgProto__AccessReply   *message,
                      ProtobufCBuffer     *buffer);
MsgProto__AccessReply *
       msg_proto__access_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg_proto__access_reply__free_unpacked
                     (MsgProto__AccessReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MsgProto__AttestReportReq_Closure)
                 (const MsgProto__AttestReportReq *message,
                  void *closure_data);
typedef void (*MsgProto__DataReadReq_Closure)
                 (const MsgProto__DataReadReq *message,
                  void *closure_data);
typedef void (*MsgProto__DataWriteReq_Closure)
                 (const MsgProto__DataWriteReq *message,
                  void *closure_data);
typedef void (*MsgProto__PauseReq_Closure)
                 (const MsgProto__PauseReq *message,
                  void *closure_data);
typedef void (*MsgProto__ResumeReq_Closure)
                 (const MsgProto__ResumeReq *message,
                  void *closure_data);
typedef void (*MsgProto__MemBoundaryReq_Closure)
                 (const MsgProto__MemBoundaryReq *message,
                  void *closure_data);
typedef void (*MsgProto__RegisterReadReq_Closure)
                 (const MsgProto__RegisterReadReq *message,
                  void *closure_data);
typedef void (*MsgProto__RegisterWriteReq_Closure)
                 (const MsgProto__RegisterWriteReq *message,
                  void *closure_data);
typedef void (*MsgProto__PageReadReq_Closure)
                 (const MsgProto__PageReadReq *message,
                  void *closure_data);
typedef void (*MsgProto__PageWriteReq_Closure)
                 (const MsgProto__PageWriteReq *message,
                  void *closure_data);
typedef void (*MsgProto__MonitorPageReq_Closure)
                 (const MsgProto__MonitorPageReq *message,
                  void *closure_data);
typedef void (*MsgProto__MonitorResumeReq_Closure)
                 (const MsgProto__MonitorResumeReq *message,
                  void *closure_data);
typedef void (*MsgProto__AttestReportReply_Closure)
                 (const MsgProto__AttestReportReply *message,
                  void *closure_data);
typedef void (*MsgProto__DataReadReply_Closure)
                 (const MsgProto__DataReadReply *message,
                  void *closure_data);
typedef void (*MsgProto__DataWriteReply_Closure)
                 (const MsgProto__DataWriteReply *message,
                  void *closure_data);
typedef void (*MsgProto__PauseReply_Closure)
                 (const MsgProto__PauseReply *message,
                  void *closure_data);
typedef void (*MsgProto__ResumeReply_Closure)
                 (const MsgProto__ResumeReply *message,
                  void *closure_data);
typedef void (*MsgProto__MemBoundaryReply_Closure)
                 (const MsgProto__MemBoundaryReply *message,
                  void *closure_data);
typedef void (*MsgProto__RegisterReadReply_Closure)
                 (const MsgProto__RegisterReadReply *message,
                  void *closure_data);
typedef void (*MsgProto__RegisterWriteReply_Closure)
                 (const MsgProto__RegisterWriteReply *message,
                  void *closure_data);
typedef void (*MsgProto__PageReadReply_Closure)
                 (const MsgProto__PageReadReply *message,
                  void *closure_data);
typedef void (*MsgProto__PageWriteReply_Closure)
                 (const MsgProto__PageWriteReply *message,
                  void *closure_data);
typedef void (*MsgProto__MonitorPageReply_Closure)
                 (const MsgProto__MonitorPageReply *message,
                  void *closure_data);
typedef void (*MsgProto__MonitorResumeReply_Closure)
                 (const MsgProto__MonitorResumeReply *message,
                  void *closure_data);
typedef void (*MsgProto__MonitorPageEvent_Closure)
                 (const MsgProto__MonitorPageEvent *message,
                  void *closure_data);
typedef void (*MsgProto__AgentPush_Closure)
                 (const MsgProto__AgentPush *message,
                  void *closure_data);
typedef void (*MsgProto__AccessRequest_Closure)
                 (const MsgProto__AccessRequest *message,
                  void *closure_data);
typedef void (*MsgProto__AccessReply_Closure)
                 (const MsgProto__AccessReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    msg_proto__request_status__descriptor;
extern const ProtobufCEnumDescriptor    msg_proto__mem_access_type__descriptor;
extern const ProtobufCEnumDescriptor    msg_proto__register_id__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__attest_report_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__data_read_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__data_write_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__pause_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__resume_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__mem_boundary_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__register_read_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__register_write_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__page_read_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__page_write_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__monitor_page_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__monitor_resume_req__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__attest_report_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__data_read_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__data_write_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__pause_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__resume_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__mem_boundary_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__register_read_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__register_write_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__page_read_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__page_write_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__monitor_page_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__monitor_resume_reply__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__monitor_page_event__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__agent_push__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__access_request__descriptor;
extern const ProtobufCMessageDescriptor msg_proto__access_reply__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_messages_2eproto__INCLUDED */
